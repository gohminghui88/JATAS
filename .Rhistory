######about the outputs of this program#######
####the population in the first row of each demographic variable is the population of all categories included, rather than the university population
####the sample size only includes the respondents who declare their demographic variable
#### when the number of respondents in a category is less than 5, correlation will not be estimated for that category
#### two-level hierarchical table will be build using this script #############
#### the first level include only one demographic variable
#### the sencond level include more than one demographic variables
#############################################Part 1##############################################
#############################################Run Once ###########################################
########subset of data for using#############
DATAORIGINAL <- subset(SES2015CompleteDataset_2, Course_Type  == "UG")
DATAUSED <- subset(DATAORIGINAL, Respondents == "1")
#attach(DATAUSED)
##########Ensure your PC has all following packages installed#######
library(scales)
library(plyr)
library(dplyr)
##########Functions defined to use later ##################
# To estimate correlation ##########
corfun<-function(x, y) {
if (length(x)<5|length(y)<5) {
return(NA)
} else {
return (cor.test(x, y, alternative="two.sided", method="pearson", use="complete.obs")$estimate)
}
}
# To estimate p-value ##########
corrfun<-function(x, y) {
if (length(x)<5|length(y)<5) {
return(NA)
} else {
return (cor.test(x, y, alternative="two.sided", method="pearson", use="complete.obs")$p.value)
}
}
############# Selection of categories used in analysis ########################
#N_categories <- readline("enter the number of catergories included in your survey ")
select_category <- rbind (c(1:40), colnames(DATAUSED)[1:40])
#############################################Part 2#################################################
#############################################Set this part every time when you run this program ####
####the demographic variables to group respondents ####
#### more than one number can be included####
Category_outer <- 3
Categories_inner <- c(9) # !!!!!!!!!!!!!!!!!!!!!!!!!!
#for j in lengths( Student Type Categories ("", Full Time, Part Time) ) which is 3
#for(j in 1: length(levels(DATAUSED[,Category_outer])))
for(j in 1:3)
{
#create empty matrix of 1 row, 15 columns, assign NA values to all cells
table_inner <- matrix(data=NA, nrow=1, ncol=15)
#for i starting from 1 to length of (Categories_inner)      Categories_inner is c(9), hence, length is 1
#hence, this loop can be removed
#for(i in 1:length(Categories_inner))
#{
#DATAUSED (Data selected where student type is UG and Respond is 1)
#DataUSED[, Category_outer] = DATAUSED[, 3]   Select 3rd column from dataused data aka Student_Type column
#levels(DATAUSED[, Category_outer])  means the categories of Student_Type aka c("", "Full Time", "Part Time")
#Data_inner <- subset(DATAUSED, DATAUSED[, Category_outer] == levels(DATAUSED[, Category_outer])[j])
Data_inner <- subset(DATAUSED, Student_Type = levels(DATAUSED$Student_Type)[j])
#Categories_inner[i] is actually 9 since i is always 1
#Data_inner[, Categories_inner[i]] is same as Data_inner[, 9] or Data_inner$Nationality as 9th column is Nationality (c("International", Singapore Citizen", "Singapore PR"))
#levels(data_inner$Nationality)   is c("International", Singapore Citizen", "Singapore PR")
#length(levels(data_inner$Nationality)) is 3
#n.level_inner <- length(levels(factor(Data_inner[, Categories_inner[i]])))
n.level_inner <- length(levels(factor(Data_inner$Nationality)))
# 5-POINTS DISTRIBUTION
#create matrix row = 3 + 1 and col = 7, cells all are NA
PointDist <- matrix(data=NA, nrow=n.level_inner+1, ncol= 7)  #Empty Matrix
#create matrix row = 3+1 and col = 5, cells all are NA
Freq_5point <- matrix(data=NA , nrow=n.level_inner+1, ncol=5) # the number of respondents in total and in each category
#Freq_table <- data.frame(table(factor(Data_inner[,Categories_inner[i]]),Data_inner$D1))
Freq_table <- data.frame(table(factor(Data_inner$Nationality), Data_inner$D1))
#Freq_5point[2:(n.level_inner+1),] <- matrix(t(Freq_table[,2]), byrow=F, ncol=5)
Freq_5point[2:4,] <- matrix(t(Freq_table$Freq), byrow=F, ncol=5)
#Freq_5point[1,]<- colSums(Freq_5point[2:(n.level_inner+1),])
Freq_5point[1,]<- colSums(Freq_5point[2:4,])  #aka, sum up rows 2 to 4 and add to row 1 of Freq_5point matrix
##############################################################NO ERROR
Freq_bygrp <- rowSums(Freq_5point)
PointDist_5 <- sweep(Freq_5point, 1, Freq_bygrp, `/`)
PointDist_5 <- cbind(PointDist_5[,5],PointDist_5[,4],PointDist_5[,3],PointDist_5[,2],PointDist_5[,1]) # to rearrange the columns
PointDist_7 <- cbind (PointDist_5,rowSums(PointDist_5[,1:2]), rowSums(PointDist_5[,4:5]))
#PointDist_7 <- matrix(percent(PointDist_7),ncol=7, byrow=F)
#PERFORMANCE
Performance <- matrix(data=NA, nrow=n.level_inner+1, ncol= 3)
Performance[,1] <- c(mean(Data_inner$D1),data.frame(aggregate(Data_inner$D1, by=list(Data_inner[,Categories_inner[i]]), FUN=mean, na.rm=FALSE))[,2])
Performance[,2] <- c( sd(Data_inner$D1),data.frame(aggregate(Data_inner$D1, by=list(Data_inner[,Categories_inner[i]]), FUN=sd, na.rm=TRUE))[,2])
Performance[,3] <- qt(p=0.975,df=Freq_bygrp-1)*Performance[,2]/sqrt(Freq_bygrp)
Performance <- round(Performance, digits =3)
###############################################################NO ERROR
#Response
Response <- matrix(data=NA, nrow=n.level_inner+1, ncol= 3)
Response[,2] <-  Freq_bygrp
#Population_table <- data.frame(table(factor(subset(DATAORIGINAL[,Categories_inner[i]], DATAORIGINAL[,Category_outer]==levels(Data_inner[,Category_outer])[j], is.element(DATAORIGINAL[,Categories_inner[i]], levels(factor(Data_inner[,Categories_inner[i]])))))))
#
#Po1<-subset(DATAORIGINAL, is.element(DATAORIGINAL[,Categories_inner[i]], levels(factor(Data_inner[,Categories_inner[i]])))) #select the categories that exist when outer variable leves is given
Po1 <- subset(DATAORIGINAL, is.element(DATAORIGINAL$Nationality, levels(factor(Data_inner$Nationality))))
#Po2<-subset(Po1, DATAORIGINAL[,Category_outer]==levels(Data_inner[,Category_outer])[j])[,Categories_inner[i]] #select for the outer variable level
Po2 <- subset(Po1, DATAORIGINAL$Student_Type == levels(Data_inner$Student_Type)[j])
Po2 <- Po2$Nationality
Population_table <- data.frame(table(factor(Po2)))
#Response[,1] <- c(sum(Population_table[,2]),Population_table[,2])
Response[,1] <- c(sum(Population_table$Freq), Population_table$Freq)
#Response[,3] <- percent(as.numeric(Response[,2])/as.numeric(Response[,1]))
Response[,3] <- percent(as.numeric(Response[,2])/as.numeric(Response[,1]))
###################################################################### No Error
Correlation <- matrix(data=NA, nrow=n.level_inner+1, ncol= 2)
Correlation[,1] <- c(cor(Data_inner$A1, Data_inner$D1, method="pearson", use="complete.obs"), ddply(Data_inner, .(na.omit(Data_inner[,Categories_inner[i]])), summarise, tau.est=corfun(A1,D1))[,2])
Correlation[,1] <- round(as.numeric(Correlation[,1]), digits=3)
Correlation[,2] <- c(cor.test(Data_inner$A1,Data_inner$D1, method="pearson", alternative = "two.sided")$p.value,  ddply(Data_inner, .(na.omit(Data_inner[,Categories_inner[i]])), summarise, p=corrfun(A1,D1))[,2])
Correlation[,2] <- round(as.numeric(Correlation[,2]), digits=3)
tabulation <- cbind(PointDist_7, Performance, Response, Correlation)
rownames(tabulation) <- c(colnames(Data_inner[Categories_inner[i]]), levels(factor(Data_inner[,Categories_inner[i]])))
table_inner <- rbind(table_inner, tabulation)
#}
table_inner <- table_inner[2:nrow(table_inner),]
table_outer<- rbind(table_outer, table_inner)
######################################################################## No Error
}
table_outer <- table_outer[2:nrow(table_outer),]
###to display the levels of outer demogrphic variable
levels(DATAUSED[,Category_outer])
### to create and save the table_outer in a csv file
write.csv(table_outer, file="Nationality_UG.csv" )
######about the outputs of this program#######
####the population in the first row of each demographic variable is the population of all categories included, rather than the university population
####the sample size only includes the respondents who declare their demographic variable
#### when the number of respondents in a category is less than 5, correlation will not be estimated for that category
#### two-level hierarchical table will be build using this script #############
#### the first level include only one demographic variable
#### the sencond level include more than one demographic variables
#############################################Part 1##############################################
#############################################Run Once ###########################################
########subset of data for using#############
DATAORIGINAL <- subset(SES2015CompleteDataset_2, Course_Type  == "UG")
DATAUSED <- subset(DATAORIGINAL, Respondents == "1")
#attach(DATAUSED)
##########Ensure your PC has all following packages installed#######
library(scales)
library(plyr)
library(dplyr)
##########Functions defined to use later ##################
# To estimate correlation ##########
corfun<-function(x, y) {
if (length(x)<5|length(y)<5) {
return(NA)
} else {
return (cor.test(x, y, alternative="two.sided", method="pearson", use="complete.obs")$estimate)
}
}
# To estimate p-value ##########
corrfun<-function(x, y) {
if (length(x)<5|length(y)<5) {
return(NA)
} else {
return (cor.test(x, y, alternative="two.sided", method="pearson", use="complete.obs")$p.value)
}
}
############# Selection of categories used in analysis ########################
#N_categories <- readline("enter the number of catergories included in your survey ")
select_category <- rbind (c(1:40), colnames(DATAUSED)[1:40])
#############################################Part 2#################################################
#############################################Set this part every time when you run this program ####
####the demographic variables to group respondents ####
#### more than one number can be included####
Category_outer <- 3
Categories_inner <- c(9) # !!!!!!!!!!!!!!!!!!!!!!!!!!
#for j in lengths( Student Type Categories ("", Full Time, Part Time) ) which is 3
#for(j in 1: length(levels(DATAUSED[,Category_outer])))
for(j in 1:3)
{
#create empty matrix of 1 row, 15 columns, assign NA values to all cells
table_inner <- matrix(data=NA, nrow=1, ncol=15)
#for i starting from 1 to length of (Categories_inner)      Categories_inner is c(9), hence, length is 1
#hence, this loop can be removed
#for(i in 1:length(Categories_inner))
#{
#DATAUSED (Data selected where student type is UG and Respond is 1)
#DataUSED[, Category_outer] = DATAUSED[, 3]   Select 3rd column from dataused data aka Student_Type column
#levels(DATAUSED[, Category_outer])  means the categories of Student_Type aka c("", "Full Time", "Part Time")
#Data_inner <- subset(DATAUSED, DATAUSED[, Category_outer] == levels(DATAUSED[, Category_outer])[j])
Data_inner <- subset(DATAUSED, Student_Type = levels(DATAUSED$Student_Type)[j])
#Categories_inner[i] is actually 9 since i is always 1
#Data_inner[, Categories_inner[i]] is same as Data_inner[, 9] or Data_inner$Nationality as 9th column is Nationality (c("International", Singapore Citizen", "Singapore PR"))
#levels(data_inner$Nationality)   is c("International", Singapore Citizen", "Singapore PR")
#length(levels(data_inner$Nationality)) is 3
#n.level_inner <- length(levels(factor(Data_inner[, Categories_inner[i]])))
n.level_inner <- length(levels(factor(Data_inner$Nationality)))
# 5-POINTS DISTRIBUTION
#create matrix row = 3 + 1 and col = 7, cells all are NA
PointDist <- matrix(data=NA, nrow=n.level_inner+1, ncol= 7)  #Empty Matrix
#create matrix row = 3+1 and col = 5, cells all are NA
Freq_5point <- matrix(data=NA , nrow=n.level_inner+1, ncol=5) # the number of respondents in total and in each category
#Freq_table <- data.frame(table(factor(Data_inner[,Categories_inner[i]]),Data_inner$D1))
Freq_table <- data.frame(table(factor(Data_inner$Nationality), Data_inner$D1))
#Freq_5point[2:(n.level_inner+1),] <- matrix(t(Freq_table[,2]), byrow=F, ncol=5)
Freq_5point[2:4,] <- matrix(t(Freq_table$Freq), byrow=F, ncol=5)
#Freq_5point[1,]<- colSums(Freq_5point[2:(n.level_inner+1),])
Freq_5point[1,]<- colSums(Freq_5point[2:4,])  #aka, sum up rows 2 to 4 and add to row 1 of Freq_5point matrix
##############################################################NO ERROR
Freq_bygrp <- rowSums(Freq_5point)
PointDist_5 <- sweep(Freq_5point, 1, Freq_bygrp, `/`)
PointDist_5 <- cbind(PointDist_5[,5],PointDist_5[,4],PointDist_5[,3],PointDist_5[,2],PointDist_5[,1]) # to rearrange the columns
PointDist_7 <- cbind (PointDist_5,rowSums(PointDist_5[,1:2]), rowSums(PointDist_5[,4:5]))
#PointDist_7 <- matrix(percent(PointDist_7),ncol=7, byrow=F)
#PERFORMANCE
Performance <- matrix(data=NA, nrow=n.level_inner+1, ncol= 3)
Performance[,1] <- c(mean(Data_inner$D1),data.frame(aggregate(Data_inner$D1, by=list(Data_inner[,Categories_inner[i]]), FUN=mean, na.rm=FALSE))[,2])
Performance[,2] <- c( sd(Data_inner$D1),data.frame(aggregate(Data_inner$D1, by=list(Data_inner[,Categories_inner[i]]), FUN=sd, na.rm=TRUE))[,2])
Performance[,3] <- qt(p=0.975,df=Freq_bygrp-1)*Performance[,2]/sqrt(Freq_bygrp)
Performance <- round(Performance, digits =3)
###############################################################NO ERROR
#Response
Response <- matrix(data=NA, nrow=n.level_inner+1, ncol= 3)
Response[,2] <-  Freq_bygrp
#Population_table <- data.frame(table(factor(subset(DATAORIGINAL[,Categories_inner[i]], DATAORIGINAL[,Category_outer]==levels(Data_inner[,Category_outer])[j], is.element(DATAORIGINAL[,Categories_inner[i]], levels(factor(Data_inner[,Categories_inner[i]])))))))
#
#Po1<-subset(DATAORIGINAL, is.element(DATAORIGINAL[,Categories_inner[i]], levels(factor(Data_inner[,Categories_inner[i]])))) #select the categories that exist when outer variable leves is given
Po1 <- subset(DATAORIGINAL, is.element(DATAORIGINAL$Nationality, levels(factor(Data_inner$Nationality))))
#Po2<-subset(Po1, DATAORIGINAL[,Category_outer]==levels(Data_inner[,Category_outer])[j])[,Categories_inner[i]] #select for the outer variable level
Po2 <- subset(Po1, DATAORIGINAL$Student_Type == levels(Data_inner$Student_Type)[j])
Po2 <- Po2$Nationality
Population_table <- data.frame(table(factor(Po2)))
#Response[,1] <- c(sum(Population_table[,2]),Population_table[,2])
Response[,1] <- c(sum(Population_table$Freq), Population_table$Freq)
#Response[,3] <- percent(as.numeric(Response[,2])/as.numeric(Response[,1]))
Response[,3] <- percent(as.numeric(Response[,2])/as.numeric(Response[,1]))
###################################################################### No Error
Correlation <- matrix(data=NA, nrow=n.level_inner+1, ncol= 2)
Correlation[,1] <- c(cor(Data_inner$A1, Data_inner$D1, method="pearson", use="complete.obs"), ddply(Data_inner, .(na.omit(Data_inner[,Categories_inner[i]])), summarise, tau.est=corfun(A1,D1))[,2])
Correlation[,1] <- round(as.numeric(Correlation[,1]), digits=3)
Correlation[,2] <- c(cor.test(Data_inner$A1,Data_inner$D1, method="pearson", alternative = "two.sided")$p.value,  ddply(Data_inner, .(na.omit(Data_inner[,Categories_inner[i]])), summarise, p=corrfun(A1,D1))[,2])
Correlation[,2] <- round(as.numeric(Correlation[,2]), digits=3)
tabulation <- cbind(PointDist_7, Performance, Response, Correlation)
rownames(tabulation) <- c(colnames(Data_inner[Categories_inner[i]]), levels(factor(Data_inner[,Categories_inner[i]])))
table_inner <- rbind(table_inner, tabulation)
#}
table_inner <- table_inner[2:nrow(table_inner),]
table_outer<- rbind(table_outer, table_inner)
######################################################################## No Error
}
######about the outputs of this program#######
####the population in the first row of each demographic variable is the population of all categories included, rather than the university population
####the sample size only includes the respondents who declare their demographic variable
#### when the number of respondents in a category is less than 5, correlation will not be estimated for that category
#### two-level hierarchical table will be build using this script #############
#### the first level include only one demographic variable
#### the sencond level include more than one demographic variables
#############################################Part 1##############################################
#############################################Run Once ###########################################
########subset of data for using#############
DATAORIGINAL <- subset(SES2015CompleteDataset_2, Course_Type  == "UG")
DATAUSED <- subset(DATAORIGINAL, Respondents == "1")
#attach(DATAUSED)
##########Ensure your PC has all following packages installed#######
library(scales)
library(plyr)
library(dplyr)
##########Functions defined to use later ##################
# To estimate correlation ##########
corfun<-function(x, y) {
if (length(x)<5|length(y)<5) {
return(NA)
} else {
return (cor.test(x, y, alternative="two.sided", method="pearson", use="complete.obs")$estimate)
}
}
# To estimate p-value ##########
corrfun<-function(x, y) {
if (length(x)<5|length(y)<5) {
return(NA)
} else {
return (cor.test(x, y, alternative="two.sided", method="pearson", use="complete.obs")$p.value)
}
}
############# Selection of categories used in analysis ########################
#N_categories <- readline("enter the number of catergories included in your survey ")
select_category <- rbind (c(1:40), colnames(DATAUSED)[1:40])
#############################################Part 2#################################################
#############################################Set this part every time when you run this program ####
####the demographic variables to group respondents ####
#### more than one number can be included####
Category_outer <- 3
Categories_inner <- c(9) # !!!!!!!!!!!!!!!!!!!!!!!!!!
table_outer <- matrix(data=NA, nrow=1, ncol=15)
colnames(table_outer) <- c("5","4","3","2","1","4+5","1+2", "Mean", "Std. Dev", "Conf. Int", "Popu", "Sample Size", "Resp. Rate", "r", "p-value")
#for j in lengths( Student Type Categories ("", Full Time, Part Time) ) which is 3
#for(j in 1: length(levels(DATAUSED[,Category_outer])))
for(j in 1:3)
{
#create empty matrix of 1 row, 15 columns, assign NA values to all cells
table_inner <- matrix(data=NA, nrow=1, ncol=15)
#for i starting from 1 to length of (Categories_inner)      Categories_inner is c(9), hence, length is 1
#hence, this loop can be removed
#for(i in 1:length(Categories_inner))
#{
#DATAUSED (Data selected where student type is UG and Respond is 1)
#DataUSED[, Category_outer] = DATAUSED[, 3]   Select 3rd column from dataused data aka Student_Type column
#levels(DATAUSED[, Category_outer])  means the categories of Student_Type aka c("", "Full Time", "Part Time")
#Data_inner <- subset(DATAUSED, DATAUSED[, Category_outer] == levels(DATAUSED[, Category_outer])[j])
Data_inner <- subset(DATAUSED, Student_Type = levels(DATAUSED$Student_Type)[j])
#Categories_inner[i] is actually 9 since i is always 1
#Data_inner[, Categories_inner[i]] is same as Data_inner[, 9] or Data_inner$Nationality as 9th column is Nationality (c("International", Singapore Citizen", "Singapore PR"))
#levels(data_inner$Nationality)   is c("International", Singapore Citizen", "Singapore PR")
#length(levels(data_inner$Nationality)) is 3
#n.level_inner <- length(levels(factor(Data_inner[, Categories_inner[i]])))
n.level_inner <- length(levels(factor(Data_inner$Nationality)))
# 5-POINTS DISTRIBUTION
#create matrix row = 3 + 1 and col = 7, cells all are NA
PointDist <- matrix(data=NA, nrow=n.level_inner+1, ncol= 7)  #Empty Matrix
#create matrix row = 3+1 and col = 5, cells all are NA
Freq_5point <- matrix(data=NA , nrow=n.level_inner+1, ncol=5) # the number of respondents in total and in each category
#Freq_table <- data.frame(table(factor(Data_inner[,Categories_inner[i]]),Data_inner$D1))
Freq_table <- data.frame(table(factor(Data_inner$Nationality), Data_inner$D1))
#Freq_5point[2:(n.level_inner+1),] <- matrix(t(Freq_table[,2]), byrow=F, ncol=5)
Freq_5point[2:4,] <- matrix(t(Freq_table$Freq), byrow=F, ncol=5)
#Freq_5point[1,]<- colSums(Freq_5point[2:(n.level_inner+1),])
Freq_5point[1,]<- colSums(Freq_5point[2:4,])  #aka, sum up rows 2 to 4 and add to row 1 of Freq_5point matrix
##############################################################NO ERROR
Freq_bygrp <- rowSums(Freq_5point)
PointDist_5 <- sweep(Freq_5point, 1, Freq_bygrp, `/`)
PointDist_5 <- cbind(PointDist_5[,5],PointDist_5[,4],PointDist_5[,3],PointDist_5[,2],PointDist_5[,1]) # to rearrange the columns
PointDist_7 <- cbind (PointDist_5,rowSums(PointDist_5[,1:2]), rowSums(PointDist_5[,4:5]))
#PointDist_7 <- matrix(percent(PointDist_7),ncol=7, byrow=F)
#PERFORMANCE
Performance <- matrix(data=NA, nrow=n.level_inner+1, ncol= 3)
Performance[,1] <- c(mean(Data_inner$D1),data.frame(aggregate(Data_inner$D1, by=list(Data_inner[,Categories_inner[i]]), FUN=mean, na.rm=FALSE))[,2])
Performance[,2] <- c( sd(Data_inner$D1),data.frame(aggregate(Data_inner$D1, by=list(Data_inner[,Categories_inner[i]]), FUN=sd, na.rm=TRUE))[,2])
Performance[,3] <- qt(p=0.975,df=Freq_bygrp-1)*Performance[,2]/sqrt(Freq_bygrp)
Performance <- round(Performance, digits =3)
###############################################################NO ERROR
#Response
Response <- matrix(data=NA, nrow=n.level_inner+1, ncol= 3)
Response[,2] <-  Freq_bygrp
#Population_table <- data.frame(table(factor(subset(DATAORIGINAL[,Categories_inner[i]], DATAORIGINAL[,Category_outer]==levels(Data_inner[,Category_outer])[j], is.element(DATAORIGINAL[,Categories_inner[i]], levels(factor(Data_inner[,Categories_inner[i]])))))))
#
#Po1<-subset(DATAORIGINAL, is.element(DATAORIGINAL[,Categories_inner[i]], levels(factor(Data_inner[,Categories_inner[i]])))) #select the categories that exist when outer variable leves is given
Po1 <- subset(DATAORIGINAL, is.element(DATAORIGINAL$Nationality, levels(factor(Data_inner$Nationality))))
#Po2<-subset(Po1, DATAORIGINAL[,Category_outer]==levels(Data_inner[,Category_outer])[j])[,Categories_inner[i]] #select for the outer variable level
Po2 <- subset(Po1, DATAORIGINAL$Student_Type == levels(Data_inner$Student_Type)[j])
Po2 <- Po2$Nationality
Population_table <- data.frame(table(factor(Po2)))
#Response[,1] <- c(sum(Population_table[,2]),Population_table[,2])
Response[,1] <- c(sum(Population_table$Freq), Population_table$Freq)
#Response[,3] <- percent(as.numeric(Response[,2])/as.numeric(Response[,1]))
Response[,3] <- percent(as.numeric(Response[,2])/as.numeric(Response[,1]))
###################################################################### No Error
Correlation <- matrix(data=NA, nrow=n.level_inner+1, ncol= 2)
Correlation[,1] <- c(cor(Data_inner$A1, Data_inner$D1, method="pearson", use="complete.obs"), ddply(Data_inner, .(na.omit(Data_inner[,Categories_inner[i]])), summarise, tau.est=corfun(A1,D1))[,2])
Correlation[,1] <- round(as.numeric(Correlation[,1]), digits=3)
Correlation[,2] <- c(cor.test(Data_inner$A1,Data_inner$D1, method="pearson", alternative = "two.sided")$p.value,  ddply(Data_inner, .(na.omit(Data_inner[,Categories_inner[i]])), summarise, p=corrfun(A1,D1))[,2])
Correlation[,2] <- round(as.numeric(Correlation[,2]), digits=3)
tabulation <- cbind(PointDist_7, Performance, Response, Correlation)
rownames(tabulation) <- c(colnames(Data_inner[Categories_inner[i]]), levels(factor(Data_inner[,Categories_inner[i]])))
table_inner <- rbind(table_inner, tabulation)
#}
table_inner <- table_inner[2:nrow(table_inner),]
table_outer<- rbind(table_outer, table_inner)
######################################################################## No Error
}
######about the outputs of this program#######
####the population in the first row of each demographic variable is the population of all categories included, rather than the university population
####the sample size only includes the respondents who declare their demographic variable
#### when the number of respondents in a category is less than 5, correlation will not be estimated for that category
#### two-level hierarchical table will be build using this script #############
#### the first level include only one demographic variable
#### the sencond level include more than one demographic variables
#############################################Part 1##############################################
#############################################Run Once ###########################################
########subset of data for using#############
DATAORIGINAL <- subset(SES2015CompleteDataset_2, Course_Type  == "UG")
DATAUSED <- subset(DATAORIGINAL, Respondents == "1")
#attach(DATAUSED)
##########Ensure your PC has all following packages installed#######
library(scales)
library(plyr)
library(dplyr)
##########Functions defined to use later ##################
# To estimate correlation ##########
corfun<-function(x, y) {
if (length(x)<5|length(y)<5) {
return(NA)
} else {
return (cor.test(x, y, alternative="two.sided", method="pearson", use="complete.obs")$estimate)
}
}
# To estimate p-value ##########
corrfun<-function(x, y) {
if (length(x)<5|length(y)<5) {
return(NA)
} else {
return (cor.test(x, y, alternative="two.sided", method="pearson", use="complete.obs")$p.value)
}
}
############# Selection of categories used in analysis ########################
#N_categories <- readline("enter the number of catergories included in your survey ")
select_category <- rbind (c(1:40), colnames(DATAUSED)[1:40])
#############################################Part 2#################################################
#############################################Set this part every time when you run this program ####
####the demographic variables to group respondents ####
#### more than one number can be included####
Category_outer <- 3
Categories_inner <- c(9) # !!!!!!!!!!!!!!!!!!!!!!!!!!
table_outer <- matrix(data=NA, nrow=1, ncol=15)
colnames(table_outer) <- c("5","4","3","2","1","4+5","1+2", "Mean", "Std. Dev", "Conf. Int", "Popu", "Sample Size", "Resp. Rate", "r", "p-value")
#for j in lengths( Student Type Categories ("", Full Time, Part Time) ) which is 3
#for(j in 1: length(levels(DATAUSED[,Category_outer])))
for(j in 1:3)
{
#create empty matrix of 1 row, 15 columns, assign NA values to all cells
table_inner <- matrix(data=NA, nrow=1, ncol=15)
#for i starting from 1 to length of (Categories_inner)      Categories_inner is c(9), hence, length is 1
#hence, this loop can be removed
#for(i in 1:length(Categories_inner))
#{
#DATAUSED (Data selected where student type is UG and Respond is 1)
#DataUSED[, Category_outer] = DATAUSED[, 3]   Select 3rd column from dataused data aka Student_Type column
#levels(DATAUSED[, Category_outer])  means the categories of Student_Type aka c("", "Full Time", "Part Time")
#Data_inner <- subset(DATAUSED, DATAUSED[, Category_outer] == levels(DATAUSED[, Category_outer])[j])
Data_inner <- subset(DATAUSED, Student_Type = levels(DATAUSED$Student_Type)[j])
#Categories_inner[i] is actually 9 since i is always 1
#Data_inner[, Categories_inner[i]] is same as Data_inner[, 9] or Data_inner$Nationality as 9th column is Nationality (c("International", Singapore Citizen", "Singapore PR"))
#levels(data_inner$Nationality)   is c("International", Singapore Citizen", "Singapore PR")
#length(levels(data_inner$Nationality)) is 3
#n.level_inner <- length(levels(factor(Data_inner[, Categories_inner[i]])))
n.level_inner <- length(levels(factor(Data_inner$Nationality)))
# 5-POINTS DISTRIBUTION
#create matrix row = 3 + 1 and col = 7, cells all are NA
PointDist <- matrix(data=NA, nrow=n.level_inner+1, ncol= 7)  #Empty Matrix
#create matrix row = 3+1 and col = 5, cells all are NA
Freq_5point <- matrix(data=NA , nrow=n.level_inner+1, ncol=5) # the number of respondents in total and in each category
#Freq_table <- data.frame(table(factor(Data_inner[,Categories_inner[i]]),Data_inner$D1))
Freq_table <- data.frame(table(factor(Data_inner$Nationality), Data_inner$D1))
#Freq_5point[2:(n.level_inner+1),] <- matrix(t(Freq_table[,2]), byrow=F, ncol=5)
Freq_5point[2:4,] <- matrix(t(Freq_table$Freq), byrow=F, ncol=5)
#Freq_5point[1,]<- colSums(Freq_5point[2:(n.level_inner+1),])
Freq_5point[1,]<- colSums(Freq_5point[2:4,])  #aka, sum up rows 2 to 4 and add to row 1 of Freq_5point matrix
##############################################################NO ERROR
Freq_bygrp <- rowSums(Freq_5point)
PointDist_5 <- sweep(Freq_5point, 1, Freq_bygrp, `/`)
PointDist_5 <- cbind(PointDist_5[,5],PointDist_5[,4],PointDist_5[,3],PointDist_5[,2],PointDist_5[,1]) # to rearrange the columns
PointDist_7 <- cbind (PointDist_5,rowSums(PointDist_5[,1:2]), rowSums(PointDist_5[,4:5]))
#PointDist_7 <- matrix(percent(PointDist_7),ncol=7, byrow=F)
#PERFORMANCE
Performance <- matrix(data=NA, nrow=n.level_inner+1, ncol= 3)
Performance[,1] <- c(mean(Data_inner$D1),data.frame(aggregate(Data_inner$D1, by=list(Data_inner[,Categories_inner[i]]), FUN=mean, na.rm=FALSE))[,2])
Performance[,2] <- c( sd(Data_inner$D1),data.frame(aggregate(Data_inner$D1, by=list(Data_inner[,Categories_inner[i]]), FUN=sd, na.rm=TRUE))[,2])
Performance[,3] <- qt(p=0.975,df=Freq_bygrp-1)*Performance[,2]/sqrt(Freq_bygrp)
Performance <- round(Performance, digits =3)
###############################################################NO ERROR
#Response
Response <- matrix(data=NA, nrow=n.level_inner+1, ncol= 3)
Response[,2] <-  Freq_bygrp
#Population_table <- data.frame(table(factor(subset(DATAORIGINAL[,Categories_inner[i]], DATAORIGINAL[,Category_outer]==levels(Data_inner[,Category_outer])[j], is.element(DATAORIGINAL[,Categories_inner[i]], levels(factor(Data_inner[,Categories_inner[i]])))))))
#
#Po1<-subset(DATAORIGINAL, is.element(DATAORIGINAL[,Categories_inner[i]], levels(factor(Data_inner[,Categories_inner[i]])))) #select the categories that exist when outer variable leves is given
Po1 <- subset(DATAORIGINAL, is.element(DATAORIGINAL$Nationality, levels(factor(Data_inner$Nationality))))
#Po2<-subset(Po1, DATAORIGINAL[,Category_outer]==levels(Data_inner[,Category_outer])[j])[,Categories_inner[i]] #select for the outer variable level
Po2 <- subset(Po1, DATAORIGINAL$Student_Type == levels(Data_inner$Student_Type)[j])
Po2 <- Po2$Nationality
Population_table <- data.frame(table(factor(Po2)))
#Response[,1] <- c(sum(Population_table[,2]),Population_table[,2])
Response[,1] <- c(sum(Population_table$Freq), Population_table$Freq)
#Response[,3] <- percent(as.numeric(Response[,2])/as.numeric(Response[,1]))
Response[,3] <- percent(as.numeric(Response[,2])/as.numeric(Response[,1]))
###################################################################### No Error
Correlation <- matrix(data=NA, nrow=n.level_inner+1, ncol= 2)
Correlation[,1] <- c(cor(Data_inner$A1, Data_inner$D1, method="pearson", use="complete.obs"), ddply(Data_inner, .(na.omit(Data_inner[,Categories_inner[i]])), summarise, tau.est=corfun(A1,D1))[,2])
Correlation[,1] <- round(as.numeric(Correlation[,1]), digits=3)
Correlation[,2] <- c(cor.test(Data_inner$A1,Data_inner$D1, method="pearson", alternative = "two.sided")$p.value,  ddply(Data_inner, .(na.omit(Data_inner[,Categories_inner[i]])), summarise, p=corrfun(A1,D1))[,2])
Correlation[,2] <- round(as.numeric(Correlation[,2]), digits=3)
tabulation <- cbind(PointDist_7, Performance, Response, Correlation)
rownames(tabulation) <- c(colnames(Data_inner[Categories_inner[i]]), levels(factor(Data_inner[,Categories_inner[i]])))
table_inner <- rbind(table_inner, tabulation)
#}
table_inner <- table_inner[2:nrow(table_inner),]
table_outer<- rbind(table_outer, table_inner)
######################################################################## No Error
}
table_outer <- table_outer[2:nrow(table_outer),]
###to display the levels of outer demogrphic variable
levels(DATAUSED[,Category_outer])
### to create and save the table_outer in a csv file
write.csv(table_outer, file="Nationality_UG.csv" )
library(shiny);
library(tm);
library(SnowballC);
library(RColorBrewer);
library(ggplot2);
library(wordcloud);
library(biclust);
#library(cluster);
library(igraph);
library(fpc);
library(nnet);
library(e1071);
library(RTextTools);
library(Rgraphviz);
library(graph);
require('shinyapps')
requires('devtools')
require('devtools')
require('shinyapps')
setwd("D:/EricGoh/NTU/R_Scripts/JATAS")
trace("create_matrix",edit=T)
require('RTextTools')
trace("create_matrix",edit=T)
shinyapps::setAccountInfo(name='gohminghui88',
token='F4F61082A67CBA5A48973E8245FAAD59',
secret='VvhJC1oaV9X0rclQzH9LlpHQu/M7YFXdlO2upnyR')
deployApp()
install.packages(c("Matrix", "Rcpp", "jsonlite", "slam", "survival"))
setwd("D:/EricGoh/NTU/R_Scripts/JATAS")
deployApp()
